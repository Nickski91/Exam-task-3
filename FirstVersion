import java.util.*;

/**
 * Created by SoftUni on 23.4.2016 Ð³..
 */
public class CriticalBreakpoint {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String point = scan.nextLine();
        String result = "";
        List<Long> critRatio = new ArrayList<>();
        List<Long> points = new ArrayList<>();

        while (!point.equals("Break it.")) {
            for(String number : point.split(" ")) {
                points.add(Long.parseLong(number));
            }
            critRatio.add(getCritRation(points));
            result += saveLine(points) + "\r\n";
            point = scan.nextLine();
            points.clear();
        }

        //Collections.sort(critRatio);
        System.out.println(breakPoints(critRatio, result));
    }

    public static Long getCritRation(List<Long> points) {
        return Math.abs((points.get(2) + points.get(3)) - (points.get(0) + points.get(1)));
    }

    public static String  saveLine(List<Long> points){
        return  "Line: [" + points.get(0) + ", " + points.get(1) + ", " + points.get(2) + ", " + points.get(3) + "]";
    }

    public static String  breakPoints(List<Long> critRatio, String result) {

        Long temp = Collections.max(critRatio);

        if (temp == 0){

            System.out.print(result);

            return "Critical Breakpoint: 1";
        }

        for (int i=0; i<critRatio.size(); i++){
            if ((critRatio.get(i) != 0) && (critRatio.get(i) != temp)){
                return "Critical breakpoint does not exist.";
            }
        }

        System.out.print(result);

        int temp2 = (int)Math.pow(temp, critRatio.size());
        int breakPoint = temp2%critRatio.size();
        return "Critical Breakpoint: " + breakPoint;

    }
}
